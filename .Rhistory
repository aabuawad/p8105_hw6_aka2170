inspection_sentiments %>%
filter(boro == "Brooklyn",
critical_flag == "Critical") %>%
mutate(inspection_num = str_c("Inspection", inspection_num),
inspection_num = fct_reorder(inspection_num, sentiment))
inspection_sentiments %>%
filter(boro == "Brooklyn",
critical_flag == "Critical") %>%
mutate(inspection_num = str_c("Inspection", inspection_num),
inspection_num = fct_reorder(inspection_num, sentiment)) %>%
ggplot(aes(x = dba,
y = sentiment)) +
geom_density()
inspection_sentiments %>%
filter(boro == "Staten Island",
critical_flag == "Critical")
inspection_sentiments %>%
filter(boro == "Staten Island",
critical_flag == "Critical") %>%
mutate(inspection_num = str_c("Inspection", inspection_num),
inspection_num = fct_reorder(inspection_num, sentiment)) %>%
ggplot(aes(x = dba,
y = sentiment)) +
geom_density()
inspection_sentiments %>%
filter(boro == "Staten Island",
critical_flag == "Critical") %>%
mutate(inspection_num = str_c("Inspection", inspection_num),
inspection_num = fct_reorder(inspection_num, sentiment)) %>%
ggplot(aes(x = dba,
y = sentiment)) +
geom_point()
inspection_sentiments %>%
filter(boro == "Staten Island",
critical_flag == "Critical") %>%
top_n(15) %>%
mutate(inspection_num = str_c("Inspection", inspection_num),
inspection_num = fct_reorder(inspection_num, sentiment)) %>%
ggplot(aes(x = dba,
y = sentiment)) +
geom_point()
inspection_sentiments %>%
filter(boro == "Staten Island",
critical_flag == "Critical") %>%
mutate(inspection_num = str_c("Inspection", inspection_num),
inspection_num = fct_reorder(inspection_num, sentiment)) %>%
ggplot(aes(x = score,
y = sentiment))
inspection_sentiments %>%
filter(boro == "Staten Island",
critical_flag == "Critical") %>%
mutate(inspection_num = str_c("Inspection", inspection_num),
inspection_num = fct_reorder(inspection_num, sentiment)) %>%
ggplot(aes(x = cuisine_description,
y = sentiment)) +
geom_point()
inspection_sentiments %>%
filter(boro == "Staten Island",
critical_flag == "Critical") %>%
mutate(inspection_num = str_c("Inspection", inspection_num),
inspection_num = fct_reorder(inspection_num, sentiment)) %>%
ggplot(aes(x = cuisine_description,
y = sentiment)) +
geom_smooth()
inspection_sentiments %>%
group_by(cuisine_description) %>%
filter(boro == "Staten Island",
critical_flag == "Critical")
inspection_sentiments %>%
group_by(cuisine_description) %>%
filter(boro == "Staten Island",
critical_flag == "Critical") %>%
mutate(inspection_num = str_c("Inspection", inspection_num),
inspection_num = fct_reorder(inspection_num, sentiment)) %>%
ggplot(aes(x = cuisine_description,
y = sentiment))
inspection_sentiments %>%
group_by(cuisine_description) %>%
filter(boro == "Staten Island",
critical_flag == "Critical") %>%
mutate(inspection_num = str_c("Inspection", inspection_num),
inspection_num = fct_reorder(inspection_num, sentiment)) %>%
ggplot(aes(x = cuisine_description,
y = sentiment)) +
geom_boxplot()
inspection_sentiments %>%
group_by(cuisine_description) %>%
filter(boro == "Staten Island",
critical_flag == "Critical") %>%
mutate(inspection_num = str_c("Inspection", inspection_num),
inspection_num = fct_reorder(inspection_num, sentiment)) %>%
ggplot(aes(x = cuisine_description,
y = sentiment)) +
geom_density_ridges()
inspection_sentiments %>%
group_by(cuisine_description) %>%
filter(boro == "Staten Island",
critical_flag == "Critical") %>%
mutate(inspection_num = str_c("Inspection", inspection_num),
inspection_num = fct_reorder(inspection_num, sentiment)) %>%
ggplot(aes(x = cuisine_description,
y = "sentiment")) +
geom_density_ridges()
inspection_sentiments %>%
group_by(cuisine_description) %>%
filter(boro == "Staten Island",
critical_flag == "Critical") %>%
mutate(inspection_num = str_c("Inspection", inspection_num),
inspection_num = fct_reorder(boro, sentiment)) %>%
ggplot(aes(x = cuisine_description,
y = sentiment)) +
geom_density_ridges()
inspection_sentiments %>%
group_by(cuisine_description) %>%
filter(boro == "Staten Island",
critical_flag == "Critical") %>%
mutate(inspection_num = str_c("Inspection", inspection_num),
inspection_num = fct_reorder(boro, sentiment)) %>%
mutate(cuisine_score = forcats::fct_reorder(cuisine_description, score, IQR)) %>%
ggplot(aes(x = score, y = cuisine_score, color = cuisine_score)) +
geom_density_ridges(aes(fill = cuisine_score)), scale = 0.85)
inspection_sentiments %>%
group_by(cuisine_description) %>%
filter(boro == "Staten Island",
critical_flag == "Critical") %>%
mutate(inspection_num = str_c("Inspection", inspection_num),
inspection_num = fct_reorder(boro, sentiment)) %>%
mutate(cuisine_score = forcats::fct_reorder(cuisine_description, score, IQR)) %>%
ggplot(aes(x = score, y = cuisine_score, color = cuisine_score)) +
geom_density_ridges(aes(fill = cuisine_score)), scale = 0.85)
inspection_sentiments %>%
group_by(cuisine_description) %>%
filter(boro == "Staten Island",
critical_flag == "Critical") %>%
mutate(inspection_num = str_c("Inspection", inspection_num),
inspection_num = fct_reorder(boro, sentiment)) %>%
mutate(cuisine_score = forcats::fct_reorder(cuisine_description, score, IQR)) %>%
ggplot(aes(x = score, y = cuisine_score, color = cuisine_score)) +
geom_density_ridges(aes(fill = cuisine_score)) scale = 0.85)
inspection_sentiments %>%
group_by(cuisine_description) %>%
filter(boro == "Staten Island",
critical_flag == "Critical") %>%
mutate(inspection_num = str_c("Inspection", inspection_num),
inspection_num = fct_reorder(boro, sentiment)) %>%
mutate(cuisine_score = forcats::fct_reorder(cuisine_description, score, IQR)) %>%
ggplot(aes(x = score, y = cuisine_score, color = cuisine_score)) +
geom_density_ridges(aes(fill = cuisine_score))
inspection_sentiments %>%
group_by(cuisine_description) %>%
filter(boro == "Staten Island",
critical_flag == "Critical") %>%
mutate(inspection_num = str_c("Inspection", inspection_num),
inspection_num = fct_reorder(boro, sentiment)) %>%
mutate(cuisine_score = forcats::fct_reorder(cuisine_description, score, IQR)) %>%
ggplot(aes(x = score, y = cuisine_score, color = cuisine_score)) +
geom_density_ridges(aes(fill = cuisine_score)) +
theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank()) +
scale_fill_viridis(discrete = TRUE) +
scale_color_viridis(discrete = TRUE)
inspection_sentiments %>%
filter(boro == "Staten Island",
cuisine_description == "American",
critical_flag == "Critical") %>%
ggplot(aes(x = score, y = dba, color = score)) +
geom_density_ridges(aes(fill = score))
inspection_sentiments %>%
filter(boro == "Staten Island",
cuisine_description == "Turkish",
critical_flag == "Critical") %>%
ggplot(aes(x = score, y = dba, color = score)) +
geom_density_ridges(aes(fill = score))
inspection_sentiments %>%
filter(boro == "Staten Island",
cuisine_description == "Turkish") %>%
ggplot(aes(x = score, y = dba, color = score)) +
geom_density_ridges(aes(fill = score))
inspection_sentiments %>%
filter(boro == "Staten Island",
cuisine_description == "Spanish") %>%
ggplot(aes(x = score, y = dba, color = score)) +
geom_density_ridges(aes(fill = score))
inspection_sentiments %>%
filter(boro == "Staten Island",
cuisine_description == "Spanish") %>%
ggplot(aes(x = score, y = dba, color = score)) +
geom_density_ridges(aes(fill = score), scale = 0.85)
inspection_sentiments %>%
filter(boro == "Staten Island",
cuisine_description == "Spanish") %>%
ggplot(aes(x = score, y = dba, color = score)) +
geom_density_ridges(aes(fill = score), scale = 0.85) +
labs(x = "Score", y = "Restaurant Names", title = "Staten Island Inspection Scores for Spanish Restaurants")
inspection_sentiments %>%
filter(boro == "Staten Island",
cuisine_description == "Spanish") %>%
ggplot(aes(x = score, y = dba, color = score)) +
geom_density_ridges(aes(fill = dba), scale = 0.85) +
labs(x = "Score", y = "Restaurant Names", title = "Staten Island Inspection Scores for Spanish Restaurants")
inspection_sentiments %>%
filter(boro == "Staten Island",
cuisine_description == "Spanish") %>%
ggplot(aes(x = score, y = dba, color = score)) +
geom_density_ridges(aes(fill = dba), scale = 0.85) +
theme(legend = "none") +
labs(x = "Score", y = "Restaurant Names", title = "Staten Island Inspection Scores for Spanish Restaurants")
inspection_sentiments %>%
filter(boro == "Staten Island",
cuisine_description == "Spanish") %>%
ggplot(aes(x = score, y = dba, color = score)) +
geom_density_ridges(aes(fill = dba), scale = 0.85) +
theme(legend.position = "none") +
labs(x = "Score", y = "Restaurant Names", title = "Staten Island Inspection Scores for Spanish Restaurants")
inspection_sentiments %>%
filter(boro == "Staten Island",
cuisine_description == "Spanish") %>%
ggplot(aes(x = sentiment, y = dba, color = dba)) +
geom_density_ridges(aes(fill = dba), scale = 0.85) +
theme(legend.position = "none") +
labs(x = "Score", y = "Restaurant Names", title = "Staten Island Inspection Scores for Spanish Restaurants")
inspection_sentiments %>%
filter(boro == "Staten Island",
cuisine_description == "Spanish") %>%
ggplot(aes(x = sentiment, y = dba, color = dba)) +
geom_density_ridges(aes(fill = dba), scale = 0.85) +
theme(legend.position = "none") +
labs(x = "Word Sentiment Score", y = "Restaurant Names", title = "Staten Island Inspection Scores for Spanish Restaurants")
renderPlotly({word_ratios %>%
mutate(pos_log_OR = ifelse(log_OR > 0, "Manhattan > Brooklyn", "Brooklyn > Manhattan")) %>% #finding words that appear most in each group
group_by(pos_log_OR) %>%
top_n(15, abs(log_OR)) %>% #taking top 15 freq appearing words in each groups
ungroup() %>%
mutate(word = fct_reorder(word, log_OR)) %>% #reordering according to log OR
plotly(x ~word, y~log_OR, fill = pos_log_OR, type = "bar")
})
library(flexdashboard)
library(tidyverse)
library(janitor)
library(stringr)
library(forcats)
library(tidytext)
library(viridis)
library(plotly)
nyc_inspections = read_csv("./data/DOHMH_New_York_City_Restaurant_Inspection_Results.csv.gz",
col_types = cols(building = col_character()),
na = c("NA", "N/A")) %>%
filter(grade %in% c("A", "B", "C")) %>%
mutate(inspection_num = row_number(),
boro = str_to_title(boro)) %>%
select(inspection_num, boro, grade, score, critical_flag, dba, cuisine_description, zipcode,
violation_description)
inspection_words = nyc_inspections %>%
unnest_tokens(word, violation_description)
data(stop_words) #loading stop words dataset
inspection_words =
anti_join(inspection_words, stop_words) #to remove them is opposite of a join from these two datasets (removing any overlap)
word_ratios = inspection_words %>%
filter(boro %in% c("Brooklyn", "Manhattan")) %>%
count(word, boro) %>%
group_by(word) %>%
filter(sum(n) >= 5) %>% #within word calculate the sums and remove anything less than 5
ungroup() %>%
spread(boro, n, fill = 0) %>% #spread it out to calculate odds ratios
mutate(
Manhattan_odds = (Manhattan + 1) / (sum(Manhattan) + 1),
Brooklyn_odds = (Brooklyn + 1) / (sum(Brooklyn) + 1),
log_OR = log(Manhattan_odds / Brooklyn_odds)
) %>% #computing odds ratios
arrange(desc(log_OR))
renderPlotly({word_ratios %>%
mutate(pos_log_OR = ifelse(log_OR > 0, "Manhattan > Brooklyn", "Brooklyn > Manhattan")) %>% #finding words that appear most in each group
group_by(pos_log_OR) %>%
top_n(15, abs(log_OR)) %>% #taking top 15 freq appearing words in each groups
ungroup() %>%
mutate(word = fct_reorder(word, log_OR)) %>% #reordering according to log OR
plotly(x ~word, y~log_OR, fill = pos_log_OR, type = "bar")
})
word_ratios %>%
mutate(pos_log_OR = ifelse(log_OR > 0, "Manhattan > Brooklyn", "Brooklyn > Manhattan")) %>% #finding words that appear most in each group
group_by(pos_log_OR) %>%
top_n(15, abs(log_OR)) %>% #taking top 15 freq appearing words in each groups
ungroup() %>%
mutate(word = fct_reorder(word, log_OR)) %>% #reordering according to log OR
plotly(x ~word, y~log_OR, fill = pos_log_OR, type = "bar")
word_ratios %>%
mutate(pos_log_OR = ifelse(log_OR > 0, "Manhattan > Brooklyn", "Brooklyn > Manhattan")) %>% #finding words that appear most in each group
group_by(pos_log_OR) %>%
top_n(15, abs(log_OR)) %>% #taking top 15 freq appearing words in each groups
ungroup() %>%
mutate(word = fct_reorder(word, log_OR)) %>% #reordering according to log OR
plotly(x ~word, y~log_OR, type = "bar")
word_ratios %>%
mutate(pos_log_OR = ifelse(log_OR > 0, "Manhattan > Brooklyn", "Brooklyn > Manhattan")) %>% #finding words that appear most in each group
group_by(pos_log_OR) %>%
top_n(15, abs(log_OR)) %>% #taking top 15 freq appearing words in each groups
ungroup() %>%
mutate(word = fct_reorder(word, log_OR)) %>% #reordering according to log OR
plotly(x = ~word, y = ~log_OR, type = "bar")
ord_ratios %>%
mutate(pos_log_OR = ifelse(log_OR > 0, "Manhattan > Brooklyn", "Brooklyn > Manhattan")) %>% #finding words that appear most in each group
group_by(pos_log_OR) %>%
top_n(15, abs(log_OR)) %>% #taking top 15 freq appearing words in each groups
ungroup() %>%
mutate(word = fct_reorder(word, log_OR)) %>% #reordering according to log OR
plot_ly(x = ~word, y = ~log_OR, type = "bar")
word_ratios %>%
mutate(pos_log_OR = ifelse(log_OR > 0, "Manhattan > Brooklyn", "Brooklyn > Manhattan")) %>% #finding words that appear most in each group
group_by(pos_log_OR) %>%
top_n(15, abs(log_OR)) %>% #taking top 15 freq appearing words in each groups
ungroup() %>%
mutate(word = fct_reorder(word, log_OR)) %>% #reordering according to log OR
plot_ly(x = ~word, y = ~log_OR, type = "bar")
word_ratios %>%
mutate(pos_log_OR = ifelse(log_OR > 0, "Manhattan > Brooklyn", "Brooklyn > Manhattan")) %>% #finding words that appear most in each group
group_by(pos_log_OR) %>%
top_n(15, abs(log_OR)) %>% #taking top 15 freq appearing words in each groups
ungroup() %>%
mutate(word = fct_reorder(word, log_OR)) %>% #reordering according to log OR
plot_ly(x = ~word, y = ~log_OR, color = ~pos_log_OR, type = "bar")
renderPlotly({nyc_inspections %>%
filter(grade == input$grade_choice) %>%
plot_ly(y = ~score, x = ~boro, color = ~boro, type = "box",
colors = "Set2")
layout(title = "Mediterranean Restaurant Inspections for NYC",
xaxis = list(title = "Borough",
showticklabels = TRUE,
tickangle = 45),
margin = list(b = 48),
yaxis = list(title = "Inspection Score"))
})
renderPlotly({nyc_inspections %>%
filter(grade == input$grade_choice) %>%
plot_ly(y = ~score, x = ~boro, color = ~boro, type = "box",
colors = "Set2")
})
nyc_inspections %>%
filter(grade == input$grade_choice) %>%
plot_ly(y = ~score, x = ~boro, color = ~boro, type = "box",
colors = "Set2"
nyc_inspections %>%
filter(grade == input$grade_choice) %>%
plot_ly(y = ~score, x = ~boro, color = ~boro, type = "box",
colors = "Set2")
nyc_inspections %>%
filter(grade == input$grade_choice)
nyc_inspections %>%
group_by(dba) %>%
mutate(restaurant_sum = n()) %>%
plot_ly(x ~dba, y ~restaurant_sum)
nyc_inspections %>%
group_by(dba) %>%
mutate(restaurant_sum = n()) %>%
plot_ly(x ~dba, y ~n())
nyc_inspections %>%
group_by(dba) %>%
mutate(restaurant_sum = n()) %>%
plot_ly(x ~dba, y ~n(), type = "hist")
nyc_inspections %>%
plot_ly(y = ~score, x = ~boro, color = ~boro, type = "box",
colors = "Set2")
inspection_sentiments %>%
filter(cuisine_description == input$cuisine_choice) %>%
plot_ly(x = ~boro, y = ~sentiment, color = ~boro, type = "bar")
nyc_inspections %>%
filter(grade == input$grade_choice) %>%
plot_ly(y = ~score, x = ~boro, color = ~boro, type = "box",
colors = "Set2")
nyc_inspections %>%
plot_ly(y = ~score, x = ~boro, color = ~boro, type = "box",
colors = "Set2")
word_ratios %>%
mutate(pos_log_OR = ifelse(log_OR > 0, "Manhattan > Brooklyn", "Brooklyn > Manhattan")) %>% #finding words that appear most in each group
group_by(pos_log_OR) %>%
top_n(15, abs(log_OR)) %>% #taking top 15 freq appearing words in each groups
ungroup() %>%
mutate(word = fct_reorder(word, log_OR)) %>% #reordering according to log OR
plot_ly(x = ~word, y = ~log_OR, color = ~pos_log_OR, type = "bar")
nyc_inspections %>%
plot_ly(y = ~score, x = ~boro, color = ~boro, type = "box",
colors = "Set2")
nyc_inspections %>%
group_by(dba) %>%
mutate(restaurant_sum = n()) %>%
plot_ly(x ~dba, y ~n(), type = "hist")
group_by(dba) %>%
mutate(restaurant_sum = n()) %>%
plot_ly(x ~dba, y ~n(), type = "histogram")
nyc_inspections %>%
group_by(dba) %>%
mutate(restaurant_sum = n()) %>%
plot_ly(x ~dba, y ~n(), type = "histogram")
nyc_inspections %>%
plot_ly(x ~dba, y ~n(), type = "histogram")
nyc_inspections %>%
plot_ly(x = ~boro, y = ~score, color = ~boro, type = "box",
colors = "Set2")
View(nyc_inspections)
nyc_inspections %>%
plot_ly(x = ~dba, y = ~n(), type = "histogram")
nyc_inspections %>%
group_by(dba) %>%
mutate(restaurant_sum = n()) %>%
plot_ly(x = ~dba, y = ~restaurant_sum, type = "histogram")
nyc_inspections %>%
group_by(dba) %>%
mutate(restaurant_sum = n()) %>%
plot_ly(x = ~cuisine_description, y = ~restaurant_sum, type = "histogram")
nyc_inspections %>%
group_by(dba) %>%
mutate(restaurant_sum = n()) %>%
plot_ly(x = ~restaurant_sum, y = ~dba, type = "histogram")
nyc_inspections %>%
group_by(dba) %>%
mutate(restaurant_sum = n()) %>%
plot_ly(x = ~dba, y = ~restaurant_sum, type = "scatter")
nyc_inspections %>%
filter(boro == "Staten Island") %>%
group_by(dba) %>%
mutate(restaurant_sum = n()) %>%
plot_ly(x = ~dba, y = ~restaurant_sum, type = "scatter")
nyc_inspections %>%
filter(boro == "Staten Island") %>%
group_by(dba) %>%
mutate(restaurant_sum = n()) %>%
plot_ly(x = ~cuisine_description, y = ~restaurant_sum, type = "scatter")
nyc_inspections %>%
filter(boro == "Staten Island") %>%
group_by(dba) %>%
mutate(restaurant_sum = n()) %>%
plot_ly(x = ~cuisine_description, y = ~restaurant_sum, type = "histogram")
nyc_inspections %>%
filter(boro == "Staten Island") %>%
group_by(dba) %>%
mutate(restaurant_sum = n()) %>%
plot_ly(x = ~cuisine_description, y = ~restaurant_sum, type = "scatter")
word_ratios %>%
mutate(pos_log_OR = ifelse(log_OR > 0, "Manhattan > Brooklyn", "Brooklyn > Manhattan")) %>% #finding words that appear most in each group
group_by(pos_log_OR) %>%
top_n(15, abs(log_OR)) %>% #taking top 15 freq appearing words in each groups
ungroup() %>%
mutate(word = fct_reorder(word, log_OR)) %>% #reordering according to log OR
plot_ly(x = ~word, y = ~log_OR, color = ~pos_log_OR, type = "bar")
word_ratios %>%
mutate(pos_log_OR = ifelse(log_OR > 0, "Manhattan > Brooklyn", "Brooklyn > Manhattan")) %>% #finding words that appear most in each group
group_by(pos_log_OR) %>%
top_n(15, abs(log_OR)) %>% #taking top 15 freq appearing words in each groups
ungroup() %>%
mutate(word = fct_reorder(word, log_OR)) %>% #reordering according to log OR
plot_ly(x = ~word, y = ~log_OR, color = ~pos_log_OR, type = "bar") %>%
layout(xaxis = list(title = "Word",
showticklabels = TRUE,
tickangle = 45),
margin = list(b = 48),
yaxis = list(title = "Log of Odds Ratio"))
nyc_inspections %>%
plot_ly(y = ~score, x = ~boro, color = ~boro, type = "box",
colors = "Set2") %>%
layout(xaxis = list(title = "Borough",
showticklabels = TRUE,
tickangle = 45),
margin = list(b = 48),
yaxis = list(title = "Inspection Score"))
nyc_inspections %>%
filter(boro == "Staten Island") %>%
group_by(dba) %>%
mutate(restaurant_sum = n()) %>%
plot_ly(x = ~cuisine_description, y = ~restaurant_sum, type = "scatter")
nyc_inspections %>%
filter(boro == "Staten Island") %>%
group_by(dba) %>%
mutate(restaurant_sum = n()) %>%
plot_ly(x = ~cuisine_description, y = ~restaurant_sum, type = "scatter") %>%
layout(xaxis = list(title = "Cuisine Description",
showticklabels = TRUE,
tickangle = 45),
margin = list(b = 48),
yaxis = list(title = "Number of Restuarants"))
nyc_inspections %>%
filter(boro == "Staten Island") %>%
group_by(dba) %>%
mutate(restaurant_sum = n()) %>%
plot_ly(x = ~cuisine_description, y = ~restaurant_sum, color = ~cuisine_decription,
type = "scatter") %>%
layout(xaxis = list(title = "Cuisine Description",
showticklabels = TRUE,
tickangle = 45),
margin = list(b = 48),
yaxis = list(title = "Number of Restuarants"))
nyc_inspections %>%
filter(boro == "Staten Island") %>%
group_by(dba) %>%
mutate(restaurant_sum = n()) %>%
plot_ly(x = ~cuisine_description, y = ~restaurant_sum, color = ~cuisine_description,
type = "scatter") %>%
layout(xaxis = list(title = "Cuisine Description",
showticklabels = TRUE,
tickangle = 45),
margin = list(b = 48),
yaxis = list(title = "Number of Restuarants"))
nyc_inspections %>%
filter(boro == "Staten Island") %>%
group_by(dba) %>%
mutate(restaurant_sum = n()) %>%
plot_ly(x = ~cuisine_description, y = ~restaurant_sum,
type = "scatter") %>%
layout(xaxis = list(title = "Cuisine Description",
showticklabels = TRUE,
tickangle = 45),
margin = list(b = 48),
yaxis = list(title = "Number of Restuarants"))
